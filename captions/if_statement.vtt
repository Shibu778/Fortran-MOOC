WEBVTT

00:00:00.000 --> 00:00:00.660 align:middle line:90%


00:00:00.660 --> 00:00:02.340 align:middle line:84%
We want to create
a function that

00:00:02.340 --> 00:00:05.310 align:middle line:84%
takes a year as an
argument and returns

00:00:05.310 --> 00:00:09.870 align:middle line:84%
true when that year is a
leap year, false otherwise.

00:00:09.870 --> 00:00:10.720 align:middle line:90%
Let's get started.

00:00:10.720 --> 00:00:13.960 align:middle line:90%


00:00:13.960 --> 00:00:16.180 align:middle line:84%
We start from the
skeleton programme.

00:00:16.180 --> 00:00:18.680 align:middle line:84%
It just has four
print statements,

00:00:18.680 --> 00:00:21.890 align:middle line:90%
one for each particular year.

00:00:21.890 --> 00:00:27.220 align:middle line:84%
So 1899 would of course not
be a leap year, 1936 would be,

00:00:27.220 --> 00:00:32.500 align:middle line:84%
1900 is not a leap
year, but 2000 is.

00:00:32.500 --> 00:00:34.390 align:middle line:84%
So the task which
remains is of course

00:00:34.390 --> 00:00:39.640 align:middle line:84%
to implement the
function is_leap_year.

00:00:39.640 --> 00:00:41.860 align:middle line:84%
So in the programme
compilation unit,

00:00:41.860 --> 00:00:44.440 align:middle line:90%
we add the contains key word.

00:00:44.440 --> 00:00:48.860 align:middle line:84%
Contains then is followed
by any number of procedures,

00:00:48.860 --> 00:00:53.510 align:middle line:84%
which we want to define in the
compilation unit and programme.

00:00:53.510 --> 00:00:55.930 align:middle line:84%
So in this particular
case, it's a function.

00:00:55.930 --> 00:00:58.600 align:middle line:90%
Its name is is_leap_year.

00:00:58.600 --> 00:01:02.830 align:middle line:84%
Its argument is year,
and its return value

00:01:02.830 --> 00:01:05.920 align:middle line:90%
is of type logical.

00:01:05.920 --> 00:01:09.010 align:middle line:84%
So we use implicit
none in order to ensure

00:01:09.010 --> 00:01:13.000 align:middle line:84%
that all local variables in
this compilation unit function

00:01:13.000 --> 00:01:16.000 align:middle line:90%
have to be declared explicitly.

00:01:16.000 --> 00:01:20.870 align:middle line:84%
The argument year
is of type integer.

00:01:20.870 --> 00:01:25.550 align:middle line:84%
The function is ended with
end function is_leap_year,

00:01:25.550 --> 00:01:28.430 align:middle line:84%
and there is just a single
statement, an assignment

00:01:28.430 --> 00:01:30.020 align:middle line:90%
of the return value.

00:01:30.020 --> 00:01:34.230 align:middle line:84%
In this case, the logical value
false to the function name,

00:01:34.230 --> 00:01:36.680 align:middle line:84%
so that ensures
the return value.

00:01:36.680 --> 00:01:40.540 align:middle line:90%


00:01:40.540 --> 00:01:43.460 align:middle line:84%
Let's compile and
run the programme.

00:01:43.460 --> 00:01:46.060 align:middle line:84%
And as you can see, we
get the correct result

00:01:46.060 --> 00:01:50.360 align:middle line:84%
for a couple of years but of
course, not for all of them.

00:01:50.360 --> 00:01:51.850 align:middle line:84%
But in general,
this is not too bad

00:01:51.850 --> 00:01:57.850 align:middle line:84%
because given that only one year
in four at most is a leap year,

00:01:57.850 --> 00:01:59.410 align:middle line:84%
we actually get
the correct results

00:01:59.410 --> 00:02:03.430 align:middle line:84%
for more than 75 percent of
all possible cases, which

00:02:03.430 --> 00:02:06.400 align:middle line:84%
is not bad for just a
single line of code.

00:02:06.400 --> 00:02:09.949 align:middle line:90%


00:02:09.949 --> 00:02:12.500 align:middle line:84%
However, let's try to
do a little bit better.

00:02:12.500 --> 00:02:14.390 align:middle line:90%
We use an if statement.

00:02:14.390 --> 00:02:17.280 align:middle line:84%
That if statement is going
to check a condition.

00:02:17.280 --> 00:02:22.370 align:middle line:84%
The condition is that the
remainder of dividing year by 4

00:02:22.370 --> 00:02:27.080 align:middle line:84%
is equal to 0, that would mean
that a year is divisible by 4

00:02:27.080 --> 00:02:30.030 align:middle line:84%
and hence that it
is a leap year.

00:02:30.030 --> 00:02:35.750 align:middle line:84%
So we have if our
condition then is_leap_year

00:02:35.750 --> 00:02:40.710 align:middle line:84%
is assigned the
value true, else--

00:02:40.710 --> 00:02:44.210 align:middle line:84%
so basically if the
remainder by division of 4

00:02:44.210 --> 00:02:48.120 align:middle line:84%
is not equal to zero,
then it's not a leap year.

00:02:48.120 --> 00:02:52.150 align:middle line:84%
And we set is_leap_year to
the logical value false,

00:02:52.150 --> 00:02:57.480 align:middle line:84%
and the if statement
is ended by and if.

00:02:57.480 --> 00:03:00.060 align:middle line:84%
When we compile and
run the code you

00:03:00.060 --> 00:03:03.770 align:middle line:84%
see that indeed the
results get better.

00:03:03.770 --> 00:03:06.630 align:middle line:84%
However, we have to refine
the logic a little bit,

00:03:06.630 --> 00:03:08.680 align:middle line:90%
because we are not there yet.

00:03:08.680 --> 00:03:12.600 align:middle line:84%
So if a year is
divisible by 4, then we

00:03:12.600 --> 00:03:16.920 align:middle line:84%
need to check whether
it's divisible by 100.

00:03:16.920 --> 00:03:22.630 align:middle line:84%
If it's divisible by 100,
and it is divisible by 400,

00:03:22.630 --> 00:03:25.630 align:middle line:90%
then is_leap_year is true.

00:03:25.630 --> 00:03:27.960 align:middle line:90%
Otherwise, it's false.

00:03:27.960 --> 00:03:35.310 align:middle line:84%
So 1900 would not be a leap
year, while 2000 would be.

00:03:35.310 --> 00:03:39.730 align:middle line:84%
And of course, if the year
is not divisible by 100

00:03:39.730 --> 00:03:44.200 align:middle line:84%
and it's divisible by
4, then it's leap year.

00:03:44.200 --> 00:03:48.610 align:middle line:90%
And this logic is complete.

00:03:48.610 --> 00:03:53.370 align:middle line:84%
Note that nested if statements
are very easy to distinguish

00:03:53.370 --> 00:03:55.860 align:middle line:84%
because we always
have if and then

00:03:55.860 --> 00:03:58.590 align:middle line:84%
and if, so that
makes it quite easy.

00:03:58.590 --> 00:04:01.680 align:middle line:84%
And of course if you use proper
indentation, although that's

00:04:01.680 --> 00:04:03.630 align:middle line:84%
not really a requirement
in Fortran,

00:04:03.630 --> 00:04:06.960 align:middle line:84%
it really helps how
readable your code is.

00:04:06.960 --> 00:04:09.820 align:middle line:90%
It improves things quite a lot.

00:04:09.820 --> 00:04:12.250 align:middle line:84%
Again, we can compile
and run the code

00:04:12.250 --> 00:04:15.400 align:middle line:84%
and now you see that we get
the correct results for each

00:04:15.400 --> 00:04:17.410 align:middle line:90%
of the years.

00:04:17.410 --> 00:04:20.079 align:middle line:84%
Just to make the point that
an if statement doesn't

00:04:20.079 --> 00:04:22.360 align:middle line:84%
need to have an else
part, we include

00:04:22.360 --> 00:04:26.350 align:middle line:84%
a check that the year
is less than 1582,

00:04:26.350 --> 00:04:28.760 align:middle line:84%
because that was when
the current calendar was

00:04:28.760 --> 00:04:32.500 align:middle line:84%
introduced, and basically
we print a warning

00:04:32.500 --> 00:04:36.040 align:middle line:84%
whenever we enter
a year which is

00:04:36.040 --> 00:04:37.930 align:middle line:90%
less than that particular year.

00:04:37.930 --> 00:04:40.470 align:middle line:90%


00:04:40.470 --> 00:04:42.640 align:middle line:84%
And when we compile
and run this,

00:04:42.640 --> 00:04:47.767 align:middle line:84%
you see that indeed for
1502 a warning is printed.

00:04:47.767 --> 00:04:49.850 align:middle line:84%
Of course, we could have
implemented this function

00:04:49.850 --> 00:04:52.050 align:middle line:90%
without the nested if statement.

00:04:52.050 --> 00:04:56.210 align:middle line:84%
And if you've never done it,
it makes for a good exercise.

00:04:56.210 --> 00:04:58.700 align:middle line:84%
Also there is a lot more
to say about proper error

00:04:58.700 --> 00:05:04.800 align:middle line:84%
handling, writing warnings,
and dealing with actual errors.

00:05:04.800 --> 00:05:07.040 align:middle line:84%
And as mentioned
before, we'll definitely

00:05:07.040 --> 00:05:10.090 align:middle line:84%
talk a lot more
about functions soon.

00:05:10.090 --> 00:05:12.000 align:middle line:90%