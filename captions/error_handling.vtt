WEBVTT

00:00:00.000 --> 00:00:01.090 align:middle line:90%


00:00:01.090 --> 00:00:04.110 align:middle line:90%
Error handling is easy, right?

00:00:04.110 --> 00:00:07.680 align:middle line:84%
Your application just writes
some error message to the screen

00:00:07.680 --> 00:00:10.290 align:middle line:90%
and it exits.

00:00:10.290 --> 00:00:13.510 align:middle line:84%
Yeah, true, but at
the end of the day,

00:00:13.510 --> 00:00:15.720 align:middle line:84%
it's a bit more
sophisticated than that,

00:00:15.720 --> 00:00:18.660 align:middle line:84%
because error messages
that don't make any sense

00:00:18.660 --> 00:00:20.710 align:middle line:90%
are quite frustrating.

00:00:20.710 --> 00:00:23.130 align:middle line:90%
So it requires a bit more work.

00:00:23.130 --> 00:00:27.030 align:middle line:84%
And especially, it requires
a switch of perspective.

00:00:27.030 --> 00:00:28.800 align:middle line:84%
You have to put
yourself in the shoes

00:00:28.800 --> 00:00:32.159 align:middle line:84%
of the user of your
application and make sure

00:00:32.159 --> 00:00:34.830 align:middle line:84%
that an error
message makes sense

00:00:34.830 --> 00:00:37.110 align:middle line:90%
from that person's perspective.

00:00:37.110 --> 00:00:43.540 align:middle line:84%
And that requires quite a
bit of imagination and work.

00:00:43.540 --> 00:00:45.720 align:middle line:84%
Consider this very
simple module.

00:00:45.720 --> 00:00:49.740 align:middle line:84%
It just defines a single
function, random_bitvector.

00:00:49.740 --> 00:00:52.990 align:middle line:90%
And that takes n as an argument.

00:00:52.990 --> 00:00:56.260 align:middle line:84%
And that number is the
length of the vector,

00:00:56.260 --> 00:00:58.260 align:middle line:90%
which is going to be produced.

00:00:58.260 --> 00:01:00.960 align:middle line:84%
vector is the name of
the resulting vector.

00:01:00.960 --> 00:01:02.590 align:middle line:90%
It is logical.

00:01:02.590 --> 00:01:04.110 align:middle line:90%
It is one-dimensional.

00:01:04.110 --> 00:01:06.360 align:middle line:90%
And it's allocatable.

00:01:06.360 --> 00:01:10.140 align:middle line:84%
We also require a
one-dimensional array

00:01:10.140 --> 00:01:15.090 align:middle line:84%
of real values, which is the
same size as our bitvector,

00:01:15.090 --> 00:01:18.960 align:middle line:84%
but which we need in order
to use the random number

00:01:18.960 --> 00:01:22.260 align:middle line:90%
subroutine of Fortran.

00:01:22.260 --> 00:01:28.620 align:middle line:84%
So we allocate both arrays,
real_vector and vector.

00:01:28.620 --> 00:01:32.160 align:middle line:84%
We call the random number
intrinsic subroutine,

00:01:32.160 --> 00:01:34.050 align:middle line:90%
to initialize real_vector.

00:01:34.050 --> 00:01:36.300 align:middle line:84%
And we initialize
the logical values

00:01:36.300 --> 00:01:40.480 align:middle line:84%
of vector just by
evaluating an inequality.

00:01:40.480 --> 00:01:43.020 align:middle line:84%
And finally, we can
deallocate real_vector,

00:01:43.020 --> 00:01:45.730 align:middle line:84%
because it has
served its purpose.

00:01:45.730 --> 00:01:48.490 align:middle line:84%
The program compilation
unit is straightforward.

00:01:48.490 --> 00:01:52.390 align:middle line:84%
We call a subroutine
get_arguments,

00:01:52.390 --> 00:01:55.980 align:middle line:84%
which is defined in
this compilation unit,

00:01:55.980 --> 00:02:00.510 align:middle line:84%
and we create a bitvector using
the random_bitvector function,

00:02:00.510 --> 00:02:02.880 align:middle line:84%
which we defined
in the random_mod.

00:02:02.880 --> 00:02:07.420 align:middle line:84%
And then we print finally,
the count of the bitvector,

00:02:07.420 --> 00:02:11.700 align:middle line:84%
so basically, the number
of logical true values

00:02:11.700 --> 00:02:13.590 align:middle line:90%
in our bitvector.

00:02:13.590 --> 00:02:18.050 align:middle line:84%
There is some error handling in
the get_arguments subroutine.

00:02:18.050 --> 00:02:21.110 align:middle line:84%
So it's intended to
initialize number of values,

00:02:21.110 --> 00:02:23.537 align:middle line:90%
the length of our bitvector.

00:02:23.537 --> 00:02:25.370 align:middle line:84%
The first thing we check
is how many command

00:02:25.370 --> 00:02:29.300 align:middle line:84%
line arguments were
actually given when

00:02:29.300 --> 00:02:31.340 align:middle line:90%
the application is launched.

00:02:31.340 --> 00:02:35.330 align:middle line:84%
And if that is not
equal to 1, then we

00:02:35.330 --> 00:02:37.550 align:middle line:84%
write an error message
telling that we

00:02:37.550 --> 00:02:41.960 align:middle line:84%
expect a single argument that
should be the number of values

00:02:41.960 --> 00:02:44.300 align:middle line:90%
for the bitvector.

00:02:44.300 --> 00:02:50.030 align:middle line:84%
And we stop, if that's the
case with a stop code, 1.

00:02:50.030 --> 00:02:53.030 align:middle line:84%
If that's not the
case, we continue.

00:02:53.030 --> 00:02:56.420 align:middle line:84%
And we get the first
command line argument,

00:02:56.420 --> 00:03:01.190 align:middle line:84%
store that into a
character array buffer.

00:03:01.190 --> 00:03:03.080 align:middle line:84%
Then we use a read
statement in order

00:03:03.080 --> 00:03:07.970 align:middle line:84%
to read an integer
from that buffer.

00:03:07.970 --> 00:03:14.330 align:middle line:84%
But we specify the optional
arguments io_msg and io_stat.

00:03:14.330 --> 00:03:18.980 align:middle line:84%
So if the io_stat
is not equal to 0,

00:03:18.980 --> 00:03:21.030 align:middle line:90%
then we have an error condition.

00:03:21.030 --> 00:03:25.730 align:middle line:84%
And again, we write an
error message to error_unit.

00:03:25.730 --> 00:03:29.390 align:middle line:84%
And we use the message
which was actually returned

00:03:29.390 --> 00:03:33.560 align:middle line:84%
by the read statement, in order
to clarify what went wrong.

00:03:33.560 --> 00:03:35.810 align:middle line:84%
And again, we stop with
a different stop code,

00:03:35.810 --> 00:03:39.470 align:middle line:84%
since this is a different
error condition.

00:03:39.470 --> 00:03:42.380 align:middle line:84%
When we build and run the
application with a large value

00:03:42.380 --> 00:03:44.330 align:middle line:84%
for the number of
values, then you

00:03:44.330 --> 00:03:46.340 align:middle line:90%
see that we get a runtime error.

00:03:46.340 --> 00:03:50.240 align:middle line:84%
But that is from the
user's perspective,

00:03:50.240 --> 00:03:52.190 align:middle line:90%
not really informative.

00:03:52.190 --> 00:03:57.680 align:middle line:84%
Because what type of memory
is being allocated here?

00:03:57.680 --> 00:03:59.090 align:middle line:90%
It's not clear.

00:03:59.090 --> 00:04:01.100 align:middle line:84%
So although this
error message may

00:04:01.100 --> 00:04:03.380 align:middle line:84%
be informative to
the programmer,

00:04:03.380 --> 00:04:05.660 align:middle line:84%
it's definitely not very
informative to a user

00:04:05.660 --> 00:04:07.400 align:middle line:90%
of this application.

00:04:07.400 --> 00:04:09.260 align:middle line:84%
It's not so hard
to improve things.

00:04:09.260 --> 00:04:14.090 align:middle line:84%
If we add an optional argument
to the allocate statement that

00:04:14.090 --> 00:04:16.310 align:middle line:84%
will hold the value
that represents

00:04:16.310 --> 00:04:19.200 align:middle line:84%
whether the allocation
was successful or not,

00:04:19.200 --> 00:04:21.649 align:middle line:84%
then we can actually do
our own error handling

00:04:21.649 --> 00:04:26.070 align:middle line:84%
and make error messages
more informative.

00:04:26.070 --> 00:04:29.450 align:middle line:84%
So that happens for both
allocation statements.

00:04:29.450 --> 00:04:31.770 align:middle line:84%
And they have a
different error message,

00:04:31.770 --> 00:04:34.610 align:middle line:84%
which is printed when
something goes wrong.

00:04:34.610 --> 00:04:36.620 align:middle line:84%
When you compile and
run the application,

00:04:36.620 --> 00:04:40.400 align:middle line:84%
you see that indeed now we get
a different error message, which

00:04:40.400 --> 00:04:45.460 align:middle line:90%
is slightly more informative.

00:04:45.460 --> 00:04:48.330 align:middle line:84%
But still, what's
the temporary vector?

00:04:48.330 --> 00:04:50.760 align:middle line:84%
So from the perspective
of the user,

00:04:50.760 --> 00:04:55.020 align:middle line:84%
the error may not have handled
at the ideal level yet.

00:04:55.020 --> 00:04:57.720 align:middle line:84%
Rather than just stopping
the application when

00:04:57.720 --> 00:05:00.240 align:middle line:84%
an error occurs in the
allocate statement,

00:05:00.240 --> 00:05:04.450 align:middle line:84%
we need a way to propagate
that up to the calling context.

00:05:04.450 --> 00:05:07.680 align:middle line:84%
So in this case, to
the program unit.

00:05:07.680 --> 00:05:12.840 align:middle line:84%
And the way to do that is to
add an optional argument, ierr,

00:05:12.840 --> 00:05:16.080 align:middle line:84%
to the signature
of the function.

00:05:16.080 --> 00:05:20.190 align:middle line:84%
If that argument is
present, then the ierr

00:05:20.190 --> 00:05:25.140 align:middle line:84%
is set to a non-zero value, and
the execution of the function

00:05:25.140 --> 00:05:29.400 align:middle line:84%
is stopped, returning
to the calling context.

00:05:29.400 --> 00:05:32.130 align:middle line:84%
On the other hand, if the
optional argument is not

00:05:32.130 --> 00:05:36.210 align:middle line:84%
present, then we simply write
an error message to error unit,

00:05:36.210 --> 00:05:39.670 align:middle line:90%
and we stop the application.

00:05:39.670 --> 00:05:43.210 align:middle line:84%
When we call the function
in the program unit,

00:05:43.210 --> 00:05:46.030 align:middle line:84%
we supply an additional
argument status.

00:05:46.030 --> 00:05:47.740 align:middle line:90%
And we check for its value.

00:05:47.740 --> 00:05:51.940 align:middle line:84%
If it's non-zero, that
indicates that random bitvector

00:05:51.940 --> 00:05:56.230 align:middle line:84%
has had a problem while it
was creating the bitvector.

00:05:56.230 --> 00:05:58.070 align:middle line:90%
And we do some error handling.

00:05:58.070 --> 00:06:01.930 align:middle line:84%
So in this case, we can give
a more meaningful message

00:06:01.930 --> 00:06:04.660 align:middle line:84%
to the user in the sense
that the user doesn't really

00:06:04.660 --> 00:06:08.170 align:middle line:84%
care whether it was a temporary
array, which could not

00:06:08.170 --> 00:06:11.110 align:middle line:84%
be allocated or whether
it was the bitvector.

00:06:11.110 --> 00:06:13.810 align:middle line:84%
He just cares about
the fact that there

00:06:13.810 --> 00:06:16.870 align:middle line:84%
was a problem with
the bitvector size

00:06:16.870 --> 00:06:19.450 align:middle line:84%
that he specified
on the command line.

00:06:19.450 --> 00:06:22.670 align:middle line:84%
And finally, we stop the
application in that case.

00:06:22.670 --> 00:06:24.310 align:middle line:84%
We can add a bit
more error handling

00:06:24.310 --> 00:06:26.710 align:middle line:90%
to the get_arguments subroutine.

00:06:26.710 --> 00:06:32.350 align:middle line:84%
If the user specifies a negative
value for the number of values,

00:06:32.350 --> 00:06:37.360 align:middle line:84%
then it results in a
bitvector with length 0, which

00:06:37.360 --> 00:06:40.400 align:middle line:84%
is probably not what
the user had in mind.

00:06:40.400 --> 00:06:45.340 align:middle line:84%
So we add an extra test to see
whether the number of values

00:06:45.340 --> 00:06:47.600 align:middle line:90%
that was entered is negative.

00:06:47.600 --> 00:06:50.110 align:middle line:84%
And if so, we print
an error message,

00:06:50.110 --> 00:06:52.720 align:middle line:90%
and we stop the application.

00:06:52.720 --> 00:06:54.580 align:middle line:84%
When we build and
run the application

00:06:54.580 --> 00:06:56.440 align:middle line:84%
with a negative
command line argument,

00:06:56.440 --> 00:07:01.110 align:middle line:84%
you see that we get a
meaningful error message.

00:07:01.110 --> 00:07:04.890 align:middle line:84%
Errors can be handled at various
levels in your application.

00:07:04.890 --> 00:07:07.250 align:middle line:84%
Doing it at the
level that makes most

00:07:07.250 --> 00:07:11.500 align:middle line:84%
sense to the users of your
application, that's the trick.

00:07:11.500 --> 00:07:12.000 align:middle line:90%