WEBVTT

00:00:00.000 --> 00:00:01.000 align:middle line:90%


00:00:01.000 --> 00:00:04.390 align:middle line:84%
Working with arrays in
Fortran is really convenient.

00:00:04.390 --> 00:00:08.480 align:middle line:84%
I don't think you need any
further evidence of that.

00:00:08.480 --> 00:00:11.050 align:middle line:84%
But what to do
when you don't know

00:00:11.050 --> 00:00:15.370 align:middle line:84%
how large your arrays are going
to be when you write your code?

00:00:15.370 --> 00:00:18.160 align:middle line:84%
Well, that's where dynamic
memory management comes in.

00:00:18.160 --> 00:00:20.980 align:middle line:84%
So your application can
ask the operating system

00:00:20.980 --> 00:00:23.410 align:middle line:84%
for enough memory
to store the data,

00:00:23.410 --> 00:00:25.570 align:middle line:84%
and when it no
longer requires it,

00:00:25.570 --> 00:00:29.150 align:middle line:84%
it can just return it
to the operating system.

00:00:29.150 --> 00:00:31.570 align:middle line:84%
So that adds quite
a lot of flexibility

00:00:31.570 --> 00:00:34.780 align:middle line:84%
to your applications,
and if you do it right,

00:00:34.780 --> 00:00:37.090 align:middle line:84%
your application
will at any point

00:00:37.090 --> 00:00:41.620 align:middle line:84%
only need such memory as it
requires at that point in time

00:00:41.620 --> 00:00:44.460 align:middle line:90%
and not more.

00:00:44.460 --> 00:00:47.130 align:middle line:84%
In this application
we want to create

00:00:47.130 --> 00:00:50.250 align:middle line:84%
an array of random
numbers, but we

00:00:50.250 --> 00:00:53.280 align:middle line:84%
don't know how large
this array is because we

00:00:53.280 --> 00:00:55.680 align:middle line:90%
get that from the command line.

00:00:55.680 --> 00:00:58.620 align:middle line:84%
There is a subroutine,
get_arguments,

00:00:58.620 --> 00:01:00.480 align:middle line:84%
and that will process
the command line

00:01:00.480 --> 00:01:04.140 align:middle line:84%
arguments specified by the
user of our application.

00:01:04.140 --> 00:01:07.380 align:middle line:84%
And it will initialize
a number of values,

00:01:07.380 --> 00:01:10.980 align:middle line:84%
and this number of
values should be the size

00:01:10.980 --> 00:01:14.040 align:middle line:90%
of the array which we create.

00:01:14.040 --> 00:01:17.080 align:middle line:90%
So how to deal with that?

00:01:17.080 --> 00:01:22.050 align:middle line:84%
Well, we declare an array real
with dimension just specified

00:01:22.050 --> 00:01:26.160 align:middle line:84%
by a colon That's the
deferred shape array.

00:01:26.160 --> 00:01:28.950 align:middle line:90%
And we declare it allocatable.

00:01:28.950 --> 00:01:33.390 align:middle line:84%
So we will be able to create
an array of any size we like,

00:01:33.390 --> 00:01:37.140 align:middle line:84%
given that it of course
fits in memory at runtime.

00:01:37.140 --> 00:01:41.670 align:middle line:84%
And that happens in the
init_values function

00:01:41.670 --> 00:01:44.370 align:middle line:84%
to which we just pass
the number of values

00:01:44.370 --> 00:01:48.420 align:middle line:84%
that the user specifies when
he runs this application.

00:01:48.420 --> 00:01:50.820 align:middle line:84%
The function
init_values get a number

00:01:50.820 --> 00:01:54.540 align:middle line:84%
of values, which is just an
integer, as its argument.

00:01:54.540 --> 00:01:57.060 align:middle line:84%
And that will be the
size of the array

00:01:57.060 --> 00:02:00.220 align:middle line:90%
it returns as a return value.

00:02:00.220 --> 00:02:02.970 align:middle line:84%
So the result value
is indeed also

00:02:02.970 --> 00:02:09.479 align:middle line:84%
a real array, one-dimensional,
deferred size, and allocatable.

00:02:09.479 --> 00:02:12.420 align:middle line:90%
Its name is "values."

00:02:12.420 --> 00:02:17.700 align:middle line:84%
The first thing to do is
to allocate the array,

00:02:17.700 --> 00:02:21.220 align:middle line:84%
and that happens with
the allocate statement.

00:02:21.220 --> 00:02:26.430 align:middle line:84%
So we pass it values with
its size, so nr_values,

00:02:26.430 --> 00:02:31.980 align:middle line:84%
and an optional argument stat,
which represents the status.

00:02:31.980 --> 00:02:35.970 align:middle line:84%
If the memory allocation
succeeds, the value of status

00:02:35.970 --> 00:02:37.050 align:middle line:90%
will be zero.

00:02:37.050 --> 00:02:39.690 align:middle line:90%
Otherwise it will be non-zero.

00:02:39.690 --> 00:02:41.370 align:middle line:84%
It's quite important
to test for that,

00:02:41.370 --> 00:02:44.700 align:middle line:84%
because if the
allocation fails, and you

00:02:44.700 --> 00:02:48.630 align:middle line:84%
keep on working with that
array which then has not

00:02:48.630 --> 00:02:52.590 align:middle line:84%
been properly allocated, you
will get some weird errors

00:02:52.590 --> 00:02:55.600 align:middle line:84%
and they might not
be that easy to find.

00:02:55.600 --> 00:02:58.680 align:middle line:84%
So it's very
strongly recommended

00:02:58.680 --> 00:03:02.430 align:middle line:84%
to test whether the value
of status is non-zero.

00:03:02.430 --> 00:03:05.160 align:middle line:84%
If that's the case, do
some error handling.

00:03:05.160 --> 00:03:08.130 align:middle line:84%
In this case, you just
write an error message

00:03:08.130 --> 00:03:15.320 align:middle line:84%
to the standard error and
we stop the application.

00:03:15.320 --> 00:03:16.770 align:middle line:90%
OK.

00:03:16.770 --> 00:03:19.770 align:middle line:84%
If the allocation
succeeded, then we

00:03:19.770 --> 00:03:22.980 align:middle line:84%
use the random_number
function on the array

00:03:22.980 --> 00:03:27.140 align:middle line:84%
values in order to
initialize the values.

00:03:27.140 --> 00:03:31.060 align:middle line:84%
Let's compile the code
and run the application

00:03:31.060 --> 00:03:37.730 align:middle line:84%
with, for instance, 100,000
as the number of values.

00:03:37.730 --> 00:03:40.630 align:middle line:84%
And as you can see, we
get five times something,

00:03:40.630 --> 00:03:43.540 align:middle line:84%
which is really
close to 0.5, which

00:03:43.540 --> 00:03:46.240 align:middle line:84%
is, of course, the
expected value when

00:03:46.240 --> 00:03:50.780 align:middle line:84%
you sample from a uniform
distribution between 0 and 1.

00:03:50.780 --> 00:03:53.710 align:middle line:90%
OK, let's do something more.

00:03:53.710 --> 00:03:55.660 align:middle line:84%
Let's run this under
the control of valgrind.

00:03:55.660 --> 00:04:01.060 align:middle line:90%


00:04:01.060 --> 00:04:04.570 align:middle line:84%
Again with the same
number of values.

00:04:04.570 --> 00:04:09.190 align:middle line:84%
Valgrind is a tool that helps
you search for memory problems.

00:04:09.190 --> 00:04:12.310 align:middle line:84%
And for instance it
can spot memory leaks,

00:04:12.310 --> 00:04:15.910 align:middle line:84%
so basically, memory that is
allocated but that never gets

00:04:15.910 --> 00:04:18.399 align:middle line:90%
deallocated.

00:04:18.399 --> 00:04:21.130 align:middle line:84%
And as you can see,
we get a heap summary

00:04:21.130 --> 00:04:23.170 align:middle line:90%
at the end of the execution.

00:04:23.170 --> 00:04:29.080 align:middle line:84%
And that tells us that we've
definitely lost 400,000 bytes.

00:04:29.080 --> 00:04:31.930 align:middle line:84%
Now of course in this
particular application,

00:04:31.930 --> 00:04:35.950 align:middle line:84%
that's not such a big
deal because the memory

00:04:35.950 --> 00:04:40.070 align:middle line:84%
is in use really until the
end of the application.

00:04:40.070 --> 00:04:43.600 align:middle line:84%
So it's not that worrying
in this particular case.

00:04:43.600 --> 00:04:47.710 align:middle line:84%
But of course it is bad practise
to have an application that

00:04:47.710 --> 00:04:49.840 align:middle line:90%
actually has a memory leak.

00:04:49.840 --> 00:04:54.970 align:middle line:84%
400,000 bytes, basically
that's 4 times 100,000,

00:04:54.970 --> 00:04:57.790 align:middle line:84%
we had an array of size
100,000 that contained

00:04:57.790 --> 00:05:00.340 align:middle line:90%
real values, 4 bytes each.

00:05:00.340 --> 00:05:02.770 align:middle line:90%
400,000 bytes.

00:05:02.770 --> 00:05:08.630 align:middle line:84%
We had five times a call
to the allocate statement.

00:05:08.630 --> 00:05:12.400 align:middle line:84%
So five times, we asked
the operating system

00:05:12.400 --> 00:05:16.470 align:middle line:90%
for 400,000 bytes.

00:05:16.470 --> 00:05:21.120 align:middle line:84%
And four times, things
were OK in the sense

00:05:21.120 --> 00:05:24.900 align:middle line:84%
that that memory which we
borrowed from the operating

00:05:24.900 --> 00:05:28.020 align:middle line:84%
system was returned to
the operating system.

00:05:28.020 --> 00:05:30.240 align:middle line:90%
But not the last time.

00:05:30.240 --> 00:05:33.840 align:middle line:84%
So basically, we
kept hold of 400,000

00:05:33.840 --> 00:05:36.870 align:middle line:84%
bytes up to the end
of the application,

00:05:36.870 --> 00:05:41.490 align:middle line:84%
although we strictly
speaking didn't need that.

00:05:41.490 --> 00:05:44.970 align:middle line:84%
It's very good practise if
you have an allocate statement

00:05:44.970 --> 00:05:47.800 align:middle line:84%
to have a deallocate
statement paired with it.

00:05:47.800 --> 00:05:52.230 align:middle line:84%
So as soon as you're done with
the memory which you requested

00:05:52.230 --> 00:05:55.200 align:middle line:84%
from the operating
system, just give it back

00:05:55.200 --> 00:06:00.430 align:middle line:84%
by using a deallocate statement,
as we'll see in a minute.

00:06:00.430 --> 00:06:05.250 align:middle line:84%
So we can fix this by adding a
deallocate statement at the end

00:06:05.250 --> 00:06:09.250 align:middle line:90%
of the do loop after it's done.

00:06:09.250 --> 00:06:12.540 align:middle line:84%
So when we compile
this code and we run it

00:06:12.540 --> 00:06:21.720 align:middle line:84%
again under control
of valgrind, then you

00:06:21.720 --> 00:06:24.390 align:middle line:84%
see that we now get a
clean bill of health.

00:06:24.390 --> 00:06:28.530 align:middle line:84%
So basically, the heap summary
says that at exit, no bytes are

00:06:28.530 --> 00:06:31.410 align:middle line:90%
in use, 0 bytes in 0 blocks.

00:06:31.410 --> 00:06:35.070 align:middle line:84%
So that actually
solved our problem.

00:06:35.070 --> 00:06:39.330 align:middle line:84%
Now all memory that has been
allocated by the application

00:06:39.330 --> 00:06:43.140 align:middle line:90%
is also properly deallocated.

00:06:43.140 --> 00:06:47.100 align:middle line:84%
If we change our programme just
a little bit, then actually,

00:06:47.100 --> 00:06:50.160 align:middle line:90%
the situation gets worse.

00:06:50.160 --> 00:06:55.770 align:middle line:84%
We can point to a location
in memory using a pointer.

00:06:55.770 --> 00:06:59.790 align:middle line:84%
So that's basically a name
for a memory location.

00:06:59.790 --> 00:07:03.930 align:middle line:84%
You could view it as
a sort of an alias.

00:07:03.930 --> 00:07:11.170 align:middle line:84%
So we have a real
dimension pointer values.

00:07:11.170 --> 00:07:15.900 align:middle line:84%
So now values will be a pointer
to a one dimensional array

00:07:15.900 --> 00:07:20.130 align:middle line:84%
of deferred shape
of real values.

00:07:20.130 --> 00:07:25.650 align:middle line:84%
And we make values point to
the result of init_values

00:07:25.650 --> 00:07:29.340 align:middle line:84%
using the arrow
operator, as you can see.

00:07:29.340 --> 00:07:33.460 align:middle line:84%
We'll talk in much more detail
about pointers later on.

00:07:33.460 --> 00:07:38.370 align:middle line:84%
But for now, just consider it
to be an alias for some memory

00:07:38.370 --> 00:07:39.480 align:middle line:90%
location.

00:07:39.480 --> 00:07:42.597 align:middle line:84%
Let's compile and
run the application

00:07:42.597 --> 00:07:43.680 align:middle line:90%
under control of valgrind.

00:07:43.680 --> 00:07:46.990 align:middle line:90%


00:07:46.990 --> 00:07:49.630 align:middle line:84%
And as you can
see, now actually,

00:07:49.630 --> 00:07:51.550 align:middle line:90%
the situation is much worse.

00:07:51.550 --> 00:07:57.640 align:middle line:84%
We've lost 1,600,000 bytes,
so basically four times

00:07:57.640 --> 00:07:59.960 align:middle line:90%
the amount we had before.

00:07:59.960 --> 00:08:02.170 align:middle line:84%
And this is of course
much worse now.

00:08:02.170 --> 00:08:04.810 align:middle line:84%
We really have a
memory leak because we

00:08:04.810 --> 00:08:09.490 align:middle line:84%
lost all those bytes, and
there is at this point

00:08:09.490 --> 00:08:11.610 align:middle line:90%
no way of recovering it.

00:08:11.610 --> 00:08:15.200 align:middle line:84%
And this was during the
runtime of our application.

00:08:15.200 --> 00:08:18.610 align:middle line:84%
So if this would have been
a long running application,

00:08:18.610 --> 00:08:22.660 align:middle line:84%
we would have seen increased
memory usage while it's

00:08:22.660 --> 00:08:25.030 align:middle line:90%
actually not at all required.

00:08:25.030 --> 00:08:27.130 align:middle line:84%
Because at each
given point in time,

00:08:27.130 --> 00:08:31.360 align:middle line:84%
we only need 400,000
bytes, while the memory

00:08:31.360 --> 00:08:37.059 align:middle line:84%
usage of the application
grew from 400,000 to 800,000

00:08:37.059 --> 00:08:42.159 align:middle line:90%
to 1,200,000 to 1,600,000 bytes.

00:08:42.159 --> 00:08:46.610 align:middle line:84%
And in the last iteration of the
do loop, even 2,000,000 bytes.

00:08:46.610 --> 00:08:48.910 align:middle line:84%
So this is really a
very bad situation,

00:08:48.910 --> 00:08:51.940 align:middle line:84%
and we would definitely
have to fix this.

00:08:51.940 --> 00:08:55.240 align:middle line:84%
We got into that situation
because we didn't

00:08:55.240 --> 00:08:57.190 align:middle line:90%
do our bookkeeping right.

00:08:57.190 --> 00:09:00.520 align:middle line:84%
So in each iteration
of the do loop,

00:09:00.520 --> 00:09:05.350 align:middle line:84%
we do an allocation in
the function init_values,

00:09:05.350 --> 00:09:10.850 align:middle line:84%
but we didn't do a deallocation,
corresponding deallocation.

00:09:10.850 --> 00:09:14.050 align:middle line:84%
So if we do a deallocation
in each iteration of the

00:09:14.050 --> 00:09:18.250 align:middle line:84%
do loop, then actually,
our problem is solved.

00:09:18.250 --> 00:09:22.120 align:middle line:84%
Let's compile the
application and run it

00:09:22.120 --> 00:09:24.700 align:middle line:90%
under control of valgrind.

00:09:24.700 --> 00:09:29.500 align:middle line:84%
And as you see again, we get
a very clean bill of health.

00:09:29.500 --> 00:09:33.460 align:middle line:84%
So 0 bytes used when
the application exits.

00:09:33.460 --> 00:09:35.530 align:middle line:90%
So our memory leak is solved.

00:09:35.530 --> 00:09:37.000 align:middle line:84%
And this is the
proper way to do it

00:09:37.000 --> 00:09:41.950 align:middle line:84%
because the lifetime
of the allocated memory

00:09:41.950 --> 00:09:46.160 align:middle line:84%
is just a single
iteration of the do loop.

00:09:46.160 --> 00:09:51.570 align:middle line:84%
So if we deallocate at
the end of the iteration,

00:09:51.570 --> 00:09:54.870 align:middle line:84%
then we don't have
any memory leaks.

00:09:54.870 --> 00:09:58.300 align:middle line:84%
What happens if we do
too many deallocations?

00:09:58.300 --> 00:10:00.930 align:middle line:84%
So let's add an
additional deallocation

00:10:00.930 --> 00:10:04.590 align:middle line:84%
at the end of the do loop,
so after that finished,

00:10:04.590 --> 00:10:05.760 align:middle line:90%
and see what happens.

00:10:05.760 --> 00:10:11.840 align:middle line:90%


00:10:11.840 --> 00:10:14.180 align:middle line:84%
As you can see,
we have a problem.

00:10:14.180 --> 00:10:16.480 align:middle line:84%
So we get a runtime
error, an attempt

00:10:16.480 --> 00:10:20.720 align:middle line:84%
of deallocating
unallocated "values."

00:10:20.720 --> 00:10:23.930 align:middle line:90%
So that is definitely a problem.

00:10:23.930 --> 00:10:26.350 align:middle line:84%
So you shouldn't do
a double deallocation

00:10:26.350 --> 00:10:30.340 align:middle line:84%
because that will indeed
result in a runtime error.

00:10:30.340 --> 00:10:33.730 align:middle line:84%
Doing the bookkeeping
right is very important.

00:10:33.730 --> 00:10:37.510 align:middle line:84%
Always pair an allocate
with a single deallocate

00:10:37.510 --> 00:10:39.280 align:middle line:90%
at some point in the code.

00:10:39.280 --> 00:10:42.820 align:middle line:84%
And note that the
allocation was done

00:10:42.820 --> 00:10:46.000 align:middle line:84%
in the function,
and the deallocation

00:10:46.000 --> 00:10:50.050 align:middle line:84%
in the main program where
that data was actually used.

00:10:50.050 --> 00:10:53.330 align:middle line:90%


00:10:53.330 --> 00:10:55.520 align:middle line:84%
So dynamic memory
management is quite useful,

00:10:55.520 --> 00:10:57.250 align:middle line:84%
and we'll see some
more applications

00:10:57.250 --> 00:11:01.820 align:middle line:84%
when we talk about interesting
data structures later on.

00:11:01.820 --> 00:11:03.410 align:middle line:84%
It's just a matter
of bookkeeping.

00:11:03.410 --> 00:11:06.640 align:middle line:84%
If you do the bookkeeping right,
it's actually straightforward

00:11:06.640 --> 00:11:09.370 align:middle line:90%
and you don't have any trouble.

00:11:09.370 --> 00:11:11.910 align:middle line:84%
Don't forget to
do a deallocation.

00:11:11.910 --> 00:11:13.510 align:middle line:90%
Don't do a double deallocation.

00:11:13.510 --> 00:11:17.460 align:middle line:84%
But apart from that,
it's fairly easy.