WEBVTT

00:00:00.000 --> 00:00:03.780 align:middle line:84%
When we were discussing
the if statement in Fortran

00:00:03.780 --> 00:00:06.690 align:middle line:84%
we wrote a small function
that returned true

00:00:06.690 --> 00:00:11.130 align:middle line:84%
if the argument was a leap
year; false, otherwise.

00:00:11.130 --> 00:00:12.750 align:middle line:90%
The function did the job.

00:00:12.750 --> 00:00:14.970 align:middle line:84%
But as we mentioned,
there's a lot more

00:00:14.970 --> 00:00:18.360 align:middle line:84%
to say about functions,
or more generally,

00:00:18.360 --> 00:00:20.400 align:middle line:90%
procedures in Fortran.

00:00:20.400 --> 00:00:21.300 align:middle line:90%
So let's dive in.

00:00:21.300 --> 00:00:24.260 align:middle line:90%


00:00:24.260 --> 00:00:27.340 align:middle line:84%
So this was the
code as we left it.

00:00:27.340 --> 00:00:31.420 align:middle line:84%
Just to re-emphasise,
the implicit none

00:00:31.420 --> 00:00:34.420 align:middle line:84%
is really required in
each compilation unit.

00:00:34.420 --> 00:00:37.100 align:middle line:84%
Although in this
particular case,

00:00:37.100 --> 00:00:40.450 align:middle line:84%
the function
is_leap_year is actually

00:00:40.450 --> 00:00:43.210 align:middle line:84%
part of the program
compilation unit

00:00:43.210 --> 00:00:45.520 align:middle line:84%
in which we had
an implicit none.

00:00:45.520 --> 00:00:48.940 align:middle line:84%
So still, you need to have
it in each compilation unit

00:00:48.940 --> 00:00:52.480 align:middle line:84%
to have its effect, to ensure
that each variable which

00:00:52.480 --> 00:00:58.470 align:middle line:84%
is used in that compilation unit
must be declared explicitly.

00:00:58.470 --> 00:01:05.239 align:middle line:84%
Now, let's modify our function
a little bit and explore a bit.

00:01:05.239 --> 00:01:08.410 align:middle line:84%
So let's add a single
statement to our function, just

00:01:08.410 --> 00:01:12.220 align:middle line:84%
an assignment to the
function argument.

00:01:12.220 --> 00:01:18.400 align:middle line:84%
We just assigned the value
1948 to the variable year In

00:01:18.400 --> 00:01:22.700 align:middle line:84%
the programme unit,
we call the function.

00:01:22.700 --> 00:01:25.340 align:middle line:84%
And afterwards,
we print the value

00:01:25.340 --> 00:01:29.670 align:middle line:84%
of the argument, which was
passed to the function.

00:01:29.670 --> 00:01:32.600 align:middle line:84%
So we just print
the value of year

00:01:32.600 --> 00:01:35.780 align:middle line:90%
after the function was called.

00:01:35.780 --> 00:01:38.930 align:middle line:84%
So when we compile and
run the application,

00:01:38.930 --> 00:01:41.810 align:middle line:90%
you might be in for a surprise.

00:01:41.810 --> 00:01:45.530 align:middle line:84%
Before the function call, the
value of the variable year

00:01:45.530 --> 00:01:53.010 align:middle line:84%
is 1899, and after the
function call, it's 1948.

00:01:53.010 --> 00:01:57.480 align:middle line:84%
So the assignment
in the function

00:01:57.480 --> 00:02:02.220 align:middle line:84%
has actually changed the
value of the variable which

00:02:02.220 --> 00:02:07.560 align:middle line:84%
was passed to that function
in the calling context.

00:02:07.560 --> 00:02:12.120 align:middle line:84%
Essentially by default,
variables in Fortran

00:02:12.120 --> 00:02:16.530 align:middle line:84%
are passed by reference to
procedures, to functions,

00:02:16.530 --> 00:02:18.180 align:middle line:90%
and to subroutines.

00:02:18.180 --> 00:02:21.090 align:middle line:84%
And that might
come as a surprise.

00:02:21.090 --> 00:02:25.270 align:middle line:84%
Fortran has some features to
deal with this kind of problem.

00:02:25.270 --> 00:02:28.740 align:middle line:84%
So for arguments
passed to procedures,

00:02:28.740 --> 00:02:31.900 align:middle line:84%
we can actually
declare the intent.

00:02:31.900 --> 00:02:37.410 align:middle line:84%
The intent can be in and that
implies that the argument

00:02:37.410 --> 00:02:39.750 align:middle line:90%
value is only used.

00:02:39.750 --> 00:02:43.410 align:middle line:84%
But it will not be
assigned a new value.

00:02:43.410 --> 00:02:46.320 align:middle line:84%
The intent might
also be inout which

00:02:46.320 --> 00:02:52.070 align:middle line:84%
means that we will use the
value passed in to the argument.

00:02:52.070 --> 00:02:54.030 align:middle line:90%
But it will also be modified.

00:02:54.030 --> 00:02:59.180 align:middle line:84%
And then also modified
in the calling context.

00:02:59.180 --> 00:03:02.140 align:middle line:84%
And finally, there's
also intent out.

00:03:02.140 --> 00:03:04.150 align:middle line:84%
And that means that
we are not going

00:03:04.150 --> 00:03:07.150 align:middle line:84%
to use the current value
of the argument passed

00:03:07.150 --> 00:03:10.000 align:middle line:84%
to the function, but
rather that we will

00:03:10.000 --> 00:03:12.070 align:middle line:90%
give that argument a value.

00:03:12.070 --> 00:03:15.880 align:middle line:84%
And that, of course, will be
the value in the calling context

00:03:15.880 --> 00:03:19.480 align:middle line:84%
after the procedure
has been called.

00:03:19.480 --> 00:03:22.480 align:middle line:84%
So in this particular
case the intent

00:03:22.480 --> 00:03:24.640 align:middle line:84%
is, of course, in,
because we want

00:03:24.640 --> 00:03:29.470 align:middle line:84%
to use the value of the
argument here in the function.

00:03:29.470 --> 00:03:32.960 align:middle line:90%
But we do not wish to modify it.

00:03:32.960 --> 00:03:35.930 align:middle line:84%
When we now compile
the application

00:03:35.930 --> 00:03:38.610 align:middle line:84%
you see that we
actually get an error.

00:03:38.610 --> 00:03:40.730 align:middle line:84%
And the error says
the dummy argument,

00:03:40.730 --> 00:03:45.830 align:middle line:84%
so the argument of the
procedure year, has intent in.

00:03:45.830 --> 00:03:50.060 align:middle line:84%
And actually it is
being assigned to,

00:03:50.060 --> 00:03:52.680 align:middle line:84%
and that, of
course, is an error.

00:03:52.680 --> 00:03:57.500 align:middle line:84%
So explicitly
declaring the intent

00:03:57.500 --> 00:04:02.840 align:middle line:84%
of arguments to procedures will
avoid a number of mistakes.

00:04:02.840 --> 00:04:05.570 align:middle line:84%
Because the compiler
will complain when

00:04:05.570 --> 00:04:08.810 align:middle line:84%
you do something
inappropriate with respect

00:04:08.810 --> 00:04:11.900 align:middle line:84%
to the intent of a
certain argument.

00:04:11.900 --> 00:04:15.510 align:middle line:84%
Let's remove the
accidental assignment

00:04:15.510 --> 00:04:18.209 align:middle line:90%
to the argument year.

00:04:18.209 --> 00:04:22.180 align:middle line:84%
And let's improve the error
handling a little bit.

00:04:22.180 --> 00:04:24.720 align:middle line:84%
So let's pass an
additional argument

00:04:24.720 --> 00:04:28.080 align:middle line:90%
to our function has_error.

00:04:28.080 --> 00:04:35.010 align:middle line:84%
And that is intended to be set
to true when an error occurred

00:04:35.010 --> 00:04:37.690 align:middle line:90%
and to false if not.

00:04:37.690 --> 00:04:42.790 align:middle line:84%
So that argument would, of
course, be of type logical

00:04:42.790 --> 00:04:44.830 align:middle line:90%
since it's a Boolean value.

00:04:44.830 --> 00:04:47.440 align:middle line:90%
And it is an optional argument.

00:04:47.440 --> 00:04:52.720 align:middle line:84%
So it may be present in
the function call or not.

00:04:52.720 --> 00:04:54.640 align:middle line:84%
And the intent is
out, because we really

00:04:54.640 --> 00:04:58.180 align:middle line:84%
don't care what value is
passed into the function.

00:04:58.180 --> 00:05:01.180 align:middle line:84%
We want to assign a value
in the function that

00:05:01.180 --> 00:05:06.160 align:middle line:84%
can be used in the calling
context, hence intent out.

00:05:06.160 --> 00:05:10.460 align:middle line:84%
But given that that is
an optional argument,

00:05:10.460 --> 00:05:13.450 align:middle line:84%
that means that we have to
check whether it was present

00:05:13.450 --> 00:05:16.210 align:middle line:84%
or not when the
function was called.

00:05:16.210 --> 00:05:20.020 align:middle line:84%
And this we can do using
the present function

00:05:20.020 --> 00:05:22.090 align:middle line:90%
it is an intrinsic function.

00:05:22.090 --> 00:05:26.020 align:middle line:84%
And if it's present,
then we set its value.

00:05:26.020 --> 00:05:28.210 align:middle line:90%
We set the value of has_error.

00:05:28.210 --> 00:05:31.120 align:middle line:84%
And depending on
whether the year

00:05:31.120 --> 00:05:36.400 align:middle line:84%
is less than or equal to 1582,
the year of the introduction

00:05:36.400 --> 00:05:40.240 align:middle line:84%
of the Gregorian calendar,
we set the Boolean value,

00:05:40.240 --> 00:05:42.880 align:middle line:90%
the logical value.

00:05:42.880 --> 00:05:45.720 align:middle line:84%
So in the programming
unit, we now have two calls

00:05:45.720 --> 00:05:48.540 align:middle line:84%
to the function is_leap_year,
the original one

00:05:48.540 --> 00:05:53.340 align:middle line:84%
with just a single argument,
the year, and the second one,

00:05:53.340 --> 00:05:58.170 align:middle line:84%
with the year as argument, but
with the optional argument,

00:05:58.170 --> 00:06:00.270 align:middle line:90%
has_error.

00:06:00.270 --> 00:06:03.210 align:middle line:84%
And so after the
call, we can check

00:06:03.210 --> 00:06:05.550 align:middle line:90%
whether has_error is true.

00:06:05.550 --> 00:06:09.180 align:middle line:84%
And in that case, we
can print a message.

00:06:09.180 --> 00:06:12.690 align:middle line:90%
Just a few details to discuss.

00:06:12.690 --> 00:06:16.710 align:middle line:84%
It's good practise when you
have an optional argument

00:06:16.710 --> 00:06:19.080 align:middle line:90%
to actually call it by name.

00:06:19.080 --> 00:06:21.840 align:middle line:84%
So basically has_error
would be the name

00:06:21.840 --> 00:06:23.490 align:middle line:90%
of that optional argument.

00:06:23.490 --> 00:06:27.750 align:middle line:84%
That really emphasises that
this is an optional argument.

00:06:27.750 --> 00:06:29.190 align:middle line:90%
So it's just good practise.

00:06:29.190 --> 00:06:30.990 align:middle line:84%
You don't need to
do that, but it

00:06:30.990 --> 00:06:34.360 align:middle line:84%
helps to make your code
easier to understand.

00:06:34.360 --> 00:06:36.150 align:middle line:84%
Another thing that
can be useful is

00:06:36.150 --> 00:06:40.290 align:middle line:84%
to change the function
signature just a little bit.

00:06:40.290 --> 00:06:44.940 align:middle line:84%
So we put the return type,
in this case logical,

00:06:44.940 --> 00:06:47.010 align:middle line:84%
in front of the
function keyword.

00:06:47.010 --> 00:06:50.670 align:middle line:84%
But then we had to assign a
return value of the function

00:06:50.670 --> 00:06:55.170 align:middle line:84%
to the function name,
which may be a bit awkward.

00:06:55.170 --> 00:06:58.290 align:middle line:84%
If you don't like that,
you can use result

00:06:58.290 --> 00:06:59.712 align:middle line:90%
with a variable name.

00:06:59.712 --> 00:07:01.170 align:middle line:84%
And then, of course,
you would have

00:07:01.170 --> 00:07:05.010 align:middle line:84%
to declare that variable, in
this case with type logical,

00:07:05.010 --> 00:07:07.600 align:middle line:90%
since that's the intent here.

00:07:07.600 --> 00:07:11.550 align:middle line:84%
And then, rather than assigning
to the name of the function

00:07:11.550 --> 00:07:15.820 align:middle line:84%
is_leap_year, we can
simply use is_leap

00:07:15.820 --> 00:07:18.940 align:middle line:84%
to hold the return
value of the function.

00:07:18.940 --> 00:07:23.190 align:middle line:84%
And that may make things
a little bit neater.

00:07:23.190 --> 00:07:25.380 align:middle line:84%
Of course, nothing
we did fundamentally

00:07:25.380 --> 00:07:28.200 align:middle line:84%
changed the implementation
of our function.

00:07:28.200 --> 00:07:31.690 align:middle line:84%
But it got a bit more
readable and, of course,

00:07:31.690 --> 00:07:33.210 align:middle line:90%
quite a bit more solid.

00:07:33.210 --> 00:07:38.930 align:middle line:84%
So basically, less opportunity
for bugs, so more solid code,

00:07:38.930 --> 00:07:40.500 align:middle line:90%
better quality.

00:07:40.500 --> 00:07:41.000 align:middle line:90%