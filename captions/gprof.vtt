WEBVTT

00:00:00.000 --> 00:00:01.350 align:middle line:90%


00:00:01.350 --> 00:00:04.860 align:middle line:84%
In scientific computing
performance is quite important.

00:00:04.860 --> 00:00:06.810 align:middle line:84%
You want to study
bigger systems.

00:00:06.810 --> 00:00:10.260 align:middle line:84%
You want to study more
sophisticated interactions,

00:00:10.260 --> 00:00:12.120 align:middle line:90%
whatever.

00:00:12.120 --> 00:00:16.620 align:middle line:84%
So you care about performance
and you try to improve it.

00:00:16.620 --> 00:00:19.170 align:middle line:84%
Many programmers
go about doing that

00:00:19.170 --> 00:00:22.530 align:middle line:84%
by trying to imagine what the
bottlenecks and the hot spots

00:00:22.530 --> 00:00:24.000 align:middle line:90%
in their application are.

00:00:24.000 --> 00:00:27.540 align:middle line:90%
And try to improve on those.

00:00:27.540 --> 00:00:31.200 align:middle line:84%
But that might not
be the best approach.

00:00:31.200 --> 00:00:34.380 align:middle line:84%
This application simulates
a cellular automaton.

00:00:34.380 --> 00:00:37.740 align:middle line:84%
So it gets some arguments
from the command line,

00:00:37.740 --> 00:00:42.630 align:middle line:84%
like the specific rule which
updates the cells in the automaton

00:00:42.630 --> 00:00:46.410 align:middle line:84%
the number of cells it has,
and the maximum number of steps

00:00:46.410 --> 00:00:50.970 align:middle line:84%
we want to take when we
simulate this automaton.

00:00:50.970 --> 00:00:53.970 align:middle line:84%
We call the function
init_automaton.

00:00:53.970 --> 00:00:57.360 align:middle line:84%
And that will create a new
automaton which is initialized.

00:00:57.360 --> 00:01:00.330 align:middle line:84%
And which has the
rule number which was

00:01:00.330 --> 00:01:03.150 align:middle line:90%
specified on the command line.

00:01:03.150 --> 00:01:05.519 align:middle line:90%
We just print the rules.

00:01:05.519 --> 00:01:08.920 align:middle line:84%
And we print the automaton
for good measure.

00:01:08.920 --> 00:01:12.810 align:middle line:84%
And then we start updating
the automaton step by step

00:01:12.810 --> 00:01:15.120 align:middle line:84%
until we reach the
maximum number of steps

00:01:15.120 --> 00:01:17.290 align:middle line:90%
supplied on the command line.

00:01:17.290 --> 00:01:22.480 align:middle line:84%
So in each iteration we step the
automaton forward by one step.

00:01:22.480 --> 00:01:25.380 align:middle line:84%
So we update all the cells
according to the rules

00:01:25.380 --> 00:01:28.560 align:middle line:90%
and we also print the automaton.

00:01:28.560 --> 00:01:31.320 align:middle line:84%
When we build and run
this application as you

00:01:31.320 --> 00:01:33.180 align:middle line:84%
can see we get some
pretty pictures.

00:01:33.180 --> 00:01:36.300 align:middle line:90%


00:01:36.300 --> 00:01:41.680 align:middle line:84%
You get these nice
patterns which are cute.

00:01:41.680 --> 00:01:45.790 align:middle line:84%
If we want to deal with a very
large automaton then probably

00:01:45.790 --> 00:01:48.440 align:middle line:84%
we need to do something
about the performance.

00:01:48.440 --> 00:01:51.370 align:middle line:84%
And if we look at the
code there are some things

00:01:51.370 --> 00:01:53.560 align:middle line:90%
which we obviously can do.

00:01:53.560 --> 00:01:58.120 align:middle line:84%
For instance in the
init_automaton function

00:01:58.120 --> 00:02:00.850 align:middle line:84%
there is a do-loop,
an explicit do-loop

00:02:00.850 --> 00:02:06.020 align:middle line:84%
that initializes the cells
of the automaton one by one.

00:02:06.020 --> 00:02:09.979 align:middle line:84%
And it probably is not the
fastest way of doing this.

00:02:09.979 --> 00:02:14.710 align:middle line:84%
So that's already one
opportunity for optimization.

00:02:14.710 --> 00:02:17.560 align:middle line:84%
Also in step_automaton
we might be

00:02:17.560 --> 00:02:20.780 align:middle line:84%
able to do smarter things
than are done here.

00:02:20.780 --> 00:02:26.230 align:middle line:84%
So for instance it might help
to just use an additional array

00:02:26.230 --> 00:02:31.060 align:middle line:84%
in order to store the
new values of the cells

00:02:31.060 --> 00:02:32.890 align:middle line:84%
rather than updating
the existing

00:02:32.890 --> 00:02:36.670 align:middle line:84%
one using this left and
last_right, variables,

00:02:36.670 --> 00:02:37.480 align:middle line:90%
and so on.

00:02:37.480 --> 00:02:40.670 align:middle line:84%
So that could be
an avenue as well.

00:02:40.670 --> 00:02:44.290 align:middle line:84%
And of course there is
the apply_rule function

00:02:44.290 --> 00:02:48.750 align:middle line:84%
which multiplies
by factors of two

00:02:48.750 --> 00:02:51.730 align:middle line:84%
and perhaps bit shifting
would be faster.

00:02:51.730 --> 00:02:56.460 align:middle line:84%
So again perhaps opportunities
for optimization.

00:02:56.460 --> 00:02:58.860 align:middle line:84%
However before starting
to change the code

00:02:58.860 --> 00:03:00.660 align:middle line:84%
and trying to improve
the performance

00:03:00.660 --> 00:03:05.010 align:middle line:84%
it's better to actually measure
where our computational time is

00:03:05.010 --> 00:03:06.180 align:middle line:90%
spent.

00:03:06.180 --> 00:03:10.650 align:middle line:84%
And that's very easy to
achieve by using a profiler.

00:03:10.650 --> 00:03:14.010 align:middle line:84%
So we prepare a programme
for profiling with gprof.

00:03:14.010 --> 00:03:17.820 align:middle line:84%
We just add the -pg
flag both for linking

00:03:17.820 --> 00:03:19.620 align:middle line:90%
and for compilation.

00:03:19.620 --> 00:03:22.590 align:middle line:84%
And for good measure
we also use -g

00:03:22.590 --> 00:03:24.870 align:middle line:90%
to add debugging information.

00:03:24.870 --> 00:03:30.190 align:middle line:84%
Once that's done you just
run your programme as usual.

00:03:30.190 --> 00:03:31.540 align:middle line:90%
It will take a while.

00:03:31.540 --> 00:03:36.510 align:middle line:84%
It's best to have a multi
seconds run in order to ensure

00:03:36.510 --> 00:03:40.900 align:middle line:84%
that the normal behaviour of
this application is measured.

00:03:40.900 --> 00:03:44.130 align:middle line:84%
So this was with rule
90 on the 100,000 cells

00:03:44.130 --> 00:03:47.770 align:middle line:90%
and 500 iterations, 500 steps.

00:03:47.770 --> 00:03:51.210 align:middle line:84%
We can now examine the profile
using the gprof command

00:03:51.210 --> 00:03:55.080 align:middle line:84%
and the name of the
application, which was profiled.

00:03:55.080 --> 00:03:57.660 align:middle line:84%
The profile is a
list of procedures

00:03:57.660 --> 00:04:00.630 align:middle line:84%
that were called
by our application

00:04:00.630 --> 00:04:03.420 align:middle line:84%
and they are ordered
from those that

00:04:03.420 --> 00:04:08.440 align:middle line:84%
took the most time to those
that took the least time.

00:04:08.440 --> 00:04:12.340 align:middle line:84%
So most prominent
is print_automaton

00:04:12.340 --> 00:04:17.529 align:middle line:84%
and that used more than two
thirds of the entire execution

00:04:17.529 --> 00:04:20.050 align:middle line:90%
time of the application.

00:04:20.050 --> 00:04:25.790 align:middle line:84%
Second comes apply_rule
which took approximately 18%.

00:04:25.790 --> 00:04:28.190 align:middle line:84%
So that means that
unless we improve

00:04:28.190 --> 00:04:30.650 align:middle line:84%
the performance
of print_automaton

00:04:30.650 --> 00:04:34.340 align:middle line:84%
we don't stand a chance
to reduce the computation

00:04:34.340 --> 00:04:36.350 align:middle line:90%
time by more than one third.

00:04:36.350 --> 00:04:38.990 align:middle line:90%


00:04:38.990 --> 00:04:45.990 align:middle line:84%
The init_automaton procedure
actually takes hardly any time

00:04:45.990 --> 00:04:46.490 align:middle line:90%
at all.

00:04:46.490 --> 00:04:49.130 align:middle line:84%
So improving its
performance will

00:04:49.130 --> 00:04:52.550 align:middle line:84%
have absolutely no influence
on the overall performance

00:04:52.550 --> 00:04:55.070 align:middle line:90%
of our application.

00:04:55.070 --> 00:04:56.640 align:middle line:90%
The profile is quite useful.

00:04:56.640 --> 00:04:58.200 align:middle line:90%
It shows a number of things.

00:04:58.200 --> 00:05:02.390 align:middle line:84%
So the total execution time in
the first column and then also

00:05:02.390 --> 00:05:06.890 align:middle line:84%
the cumulative time
which can also be useful.

00:05:06.890 --> 00:05:10.253 align:middle line:84%
Also self seconds
is quite interesting

00:05:10.253 --> 00:05:12.170 align:middle line:84%
because that's the time
spent in the procedure

00:05:12.170 --> 00:05:16.700 align:middle line:84%
itself, not in those that
procedure is calling.

00:05:16.700 --> 00:05:20.700 align:middle line:84%
And a number of calls can
also be quite informative.

00:05:20.700 --> 00:05:23.960 align:middle line:84%
So for instance, our
apply_rule procedure

00:05:23.960 --> 00:05:27.330 align:middle line:90%
is called very many times.

00:05:27.330 --> 00:05:29.790 align:middle line:84%
It can also help
to find some bugs.

00:05:29.790 --> 00:05:33.960 align:middle line:84%
Because if there are more
or less calls to a procedure

00:05:33.960 --> 00:05:36.420 align:middle line:84%
than you would expect,
you have a chance

00:05:36.420 --> 00:05:39.450 align:middle line:90%
to figure that out here.

00:05:39.450 --> 00:05:42.120 align:middle line:84%
Often intuition is
really not your friend

00:05:42.120 --> 00:05:46.200 align:middle line:84%
when it comes to computational
performance and efficiency.

00:05:46.200 --> 00:05:49.230 align:middle line:84%
It's much better to
actually measure performance

00:05:49.230 --> 00:05:52.590 align:middle line:84%
to identify hot spots and
bottlenecks before diving

00:05:52.590 --> 00:05:55.290 align:middle line:84%
in and spending significant
time trying to improve

00:05:55.290 --> 00:05:57.300 align:middle line:90%
the performance of your code.

00:05:57.300 --> 00:06:00.050 align:middle line:84%
Of course there are much
better tools than gprof

00:06:00.050 --> 00:06:04.500 align:middle line:84%
So if you have access to those
you should really use them.

00:06:04.500 --> 00:06:05.000 align:middle line:90%